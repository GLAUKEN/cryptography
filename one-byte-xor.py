def one_byte_xor(message, key):
    ciphertext = b''
    for byte in message:
        ciphertext += bytes([byte ^ key])
    return ciphertext

# Encryption

def encrypt(message, key):
    return one_byte_xor(message, key)

# 1) What is decryption ?

# This is the process to "reverse" data that has been rendered unreable/incomprehensible 
# The decrypted message is the original message

# 2) How many keys are there ?

# Since our key is a single byte, there are 256 possibilites
# 1 bit = 2 possibilities
# 1 byte = 8 bits = 2^8 = 256 possibilites

# 3) What is the difference with Vigenere ?

# The difference between single byte XOR and Vigenere is that Vigenere encrypts each alphabetical letter of the message according to the corresponding alphabetical letter of the key
# We can use the Vigenere table to encrypt the message

# Decryption with the key known
# When the key is known, we just need to XORed the ciphertext to reverse the operation

def decrypt_key_known(ciphertext, key):
    return one_byte_xor(ciphertext, key)

# Decryption with the key unknown
# When the key is unknown, it becomes a little more complex because we can't really know how the message has been encrypted.

# One way is to proceed with the "brute force"
# Indeed, we know that XOR the ciphertext reverses the operation and that our key is coded in 1 byte so there are only 256 possibilities

# So the question is more about which one is correct
# The answer is that the key is coded in a single byte
# So each byte of our message is translated/encrypted in the same way (by the same ascii code of our key)
# To be more explicit, each byte will always have the same image when it is XORed

# Let's assume our message is in english. Considering every english words, each letter has a different probability to appear

def calculate_probability(message_bytes):
    letters_frequencies = {
        'a': .08167, 'b': .01492, 'c': .02782, 'd': .04253,
        'e': .12702, 'f': .02228, 'g': .02015, 'h': .06094,
        'i': .06094, 'j': .00153, 'k': .00772, 'l': .04025,
        'm': .02406, 'n': .06749, 'o': .07507, 'p': .01929,
        'q': .00095, 'r': .05987, 's': .06327, 't': .09056,
        'u': .02758, 'v': .00978, 'w': .02360, 'x': .00150,
        'y': .01974, 'z': .00074, ' ': .13000
    }
    return sum([letters_frequencies.get(chr(byte), 0) for byte in message_bytes.lower()])

def crack_ciphertext(ciphertext_hex):
    ciphertext_bytes = bytes.fromhex(ciphertext_hex)
    message = None
    key = None
    probability_max = -1
    for key_value in range(256):
        potential_message = one_byte_xor(ciphertext_bytes, key_value)
        probability_message = calculate_probability(potential_message)
        if probability_max < probability_message:
            message = potential_message
            probability_max = probability_message
            key = key_value
    return { "key": key, "message": message }

ciphertext_1 = 'c9e4e1ebeda8ffe9fba8eaedefe1e6e6e1e6efa8fce7a8efedfca8feedfaf1a8fce1faedeca8e7eea8fbe1fcfce1e6efa8eaf1a8e0edfaa8fbe1fbfcedfaa8e7e6a8fce0eda8eae9e6e3a4a8e9e6eca8e7eea8e0e9fee1e6efa8e6e7fce0e1e6efa8fce7a8ece7b2a8e7e6ebeda8e7faa8fcffe1ebeda8fbe0eda8e0e9eca8f8ededf8edeca8e1e6fce7a8fce0eda8eae7e7e3a8e0edfaa8fbe1fbfcedfaa8ffe9fba8faede9ece1e6efa4a8eafdfca8e1fca8e0e9eca8e6e7a8f8e1ebfcfdfaedfba8e7faa8ebe7e6feedfafbe9fce1e7e6fba8e1e6a8e1fca4a86a0810e9e6eca8ffe0e9fca8e1fba8fce0eda8fdfbeda8e7eea8e9a8eae7e7e3a46a0811a8fce0e7fdefe0fca8c9e4e1ebeda86a0810ffe1fce0e7fdfca8f8e1ebfcfdfaedfba8e7faa8ebe7e6feedfafbe9fce1e7e6fbb76a0811'
ciphertext_2 = '645817445f521740564417545859445e5352455e5950175e59175f524517584059175a5e5953171f56441740525b5b17564417445f52175458425b531b1751584517435f52175f58431753564e175a565352175f5245175152525b174152454e17445b5252474e1756595317444342475e531e1b17405f52435f524517435f5217475b525644424552175851175a565c5e595017561753565e444e1a545f565e59174058425b5317555217405845435f17435f521743455842555b5217585117505243435e59501742471756595317475e545c5e595017435f521753565e445e52441b17405f5259174442535352595b4e175617605f5e435217655655555e4317405e435f17475e595c17524e52441745565917545b58445217554e175f524519'
ciphertext_3 = '556964736421766072216f6e7569686f6621726e21776473782173646c60736a60636d6421686f21756960753a216f6e732165686521406d686264217569686f6a21687521726e2177647378216c746269216e7475216e67217569642176607821756e216964607321756964215360636368752172607821756e21687572646d672d21e381994e69216564607320214e692165646073202148217269606d6d216364216d60756420e3819821297669646f217269642175696e74666975216875216e77647321606775647376607365722d216875216e6262747373646521756e21696473217569607521726964216e7466697521756e216960776421766e6f656473646521607521756968722d21637475216075217569642175686c6421687521606d6d217264646c6465217074687564216f60757473606d283a21637475217669646f21756964215360636368752160627574606d6d7821756e6e6a2160217660756269216e7475216e6721687572217660687275626e60752c716e626a64752d21606f65216d6e6e6a64652160752168752d21606f65217569646f2169747373686465216e6f2d21406d686264217275607375646521756e2169647321676464752d21676e7321687521676d6072696465216062736e727221696473216c686f6521756960752172696421696065216f64776473216364676e7364217264646f2160217360636368752176687569216468756964732160217660687275626e60752c716e626a64752d216e73216021766075626921756e2175606a64216e7475216e672168752d21606f65216374736f686f66217668756921627473686e726875782d217269642173606f216062736e727221756964216768646d652160677564732168752d21606f6521676e7375746f6075646d7821766072216b74727521686f2175686c6421756e2172646421687521716e7121656e766f2160216d60736664217360636368752c696e6d6421746f656473217569642169646566642f'
ciphertext_4 = '5b7c32737c7d667a7760327f7d7f777c6632767d657c3265777c6632537e7b7177327374667760327b663e327c77647760327d7c717732717d7c617b7677607b7c75327a7d65327b7c32667a7732657d607e7632617a773265736132667d32757766327d6766327375737b7c3c'
ciphertext_5 = 'c2fef3b6e4f7f4f4ffe2bbfef9faf3b6e1f3f8e2b6e5e2e4f7fff1fee2b6f9f8b6fafffdf3b6f7b6e2e3f8f8f3fab6f0f9e4b6e5f9fbf3b6e1f7efbab6f7f8f2b6e2fef3f8b6f2ffe6e6f3f2b6e5e3f2f2f3f8faefb6f2f9e1f8bab6e5f9b6e5e3f2f2f3f8faefb6e2fef7e2b6d7fafff5f3b6fef7f2b6f8f9e2b6f7b6fbf9fbf3f8e2b6e2f9b6e2fefff8fdb6f7f4f9e3e2b6e5e2f9e6e6fff8f1b6fef3e4e5f3faf0b6f4f3f0f9e4f3b6e5fef3b6f0f9e3f8f2b6fef3e4e5f3faf0b6f0f7fafafff8f1b6f2f9e1f8b6f7b6e0f3e4efb6f2f3f3e6b6e1f3fafab8'
ciphertext_6 = '4f637e626f782a7e626f2a7d6f66662a7d6b792a7c6f78732a6e6f6f7a262a65782a79626f2a6c6f66662a7c6f78732a7966657d6673262a6c65782a79626f2a626b6e2a7a666f647e732a656c2a7e63676f2a6b792a79626f2a7d6f647e2a6e657d642a7e652a666565612a6b68657f7e2a626f782a6b646e2a7e652a7d65646e6f782a7d626b7e2a7d6b792a6d6563646d2a7e652a626b7a7a6f642a646f727e242a4c6378797e262a79626f2a7e78636f6e2a7e652a666565612a6e657d642a6b646e2a676b616f2a657f7e2a7d626b7e2a79626f2a7d6b792a69656763646d2a7e65262a687f7e2a637e2a7d6b792a7e65652a6e6b78612a7e652a796f6f2a6b64737e6263646d312a7e626f642a79626f2a666565616f6e2a6b7e2a7e626f2a79636e6f792a656c2a7e626f2a7d6f6666262a6b646e2a64657e63696f6e2a7e626b7e2a7e626f732a7d6f786f2a6c6366666f6e2a7d637e622a697f7a68656b786e792a6b646e2a686565612779626f667c6f79312a626f786f2a6b646e2a7e626f786f2a79626f2a796b7d2a676b7a792a6b646e2a7a63697e7f786f792a627f646d2a7f7a65642a7a6f6d79242a59626f2a7e6565612a6e657d642a6b2a606b782a6c7865672a65646f2a656c2a7e626f2a79626f667c6f792a6b792a79626f2a7a6b79796f6e312a637e2a7d6b792a666b686f66666f6e2ae88a9245584b444d4f2a474b58474b464b4e4fe88a93262a687f7e2a7e652a626f782a6d786f6b7e2a6e63796b7a7a6563647e676f647e2a637e2a7d6b792a6f677a7e73302a79626f2a6e636e2a64657e2a6663616f2a7e652a6e78657a2a7e626f2a606b782a6c65782a6c6f6b782a656c2a6163666663646d2a7965676f68656e73262a79652a676b646b6d6f6e2a7e652a7a7f7e2a637e2a63647e652a65646f2a656c2a7e626f2a697f7a68656b786e792a6b792a79626f2a6c6f66662a7a6b797e2a637e24'
ciphertext_7 = '4e2c34fbc9c0c08d4e2c358cd8c4c3d9cbc4d88cedc0c5cfc98cd8c38cc4c9dedfc9c0ca808c4e2c34cdcad8c9de8cdfd9cfc48ccd8ccacdc0c08ccddf8cd8c4c5df808ce58cdfc4cdc0c08cd8c4c5c2c78cc2c3d8c4c5c2cb8cc3ca8cd8d9c1cec0c5c2cb8cc8c3dbc28cdfd8cdc5dedf8d8ce4c3db8ccedecddac98cd8c4c9d54e2c35c0c08ccdc0c08cd8c4c5c2c78cc1c98ccdd88cc4c3c1c98d8cfbc4d5808ce58cdbc3d9c0c8c24e2c35d88cdfcdd58ccdc2d5d8c4c5c2cb8ccdcec3d9d88cc5d8808cc9dac9c28cc5ca8ce58ccac9c0c08cc3caca8cd8c4c98cd8c3dc8cc3ca8cd8c4c98cc4c3d9dfc98d4e2c358c84fbc4c5cfc48cdbcddf8cdac9ded58cc0c5c7c9c0d58cd8ded9c98285'
ciphertext_8 = 'ebc0d8c1838fcbc0d8c1838fcbc0d8c1818ff8c0dac3cb8fdbc7ca8fc9cec3c38fc1cad9cadd8fccc0c2ca8fdbc08fcec18fcac1cb8e8f4d2f37e68fd8c0c1cbcadd8fc7c0d88fc2cec1d68fc2c6c3cadc8fe64d2f36d9ca8fc9cec3c3cac18fcdd68fdbc7c6dc8fdbc6c2ca904d2f368fdcc7ca8fdccec6cb8fcec3c0dacb818f4d2f37e68fc2dadcdb8fcdca8fc8cadbdbc6c1c88fdcc0c2cad8c7caddca8fc1cacedd8fdbc7ca8fcccac1dbddca8fc0c98fdbc7ca8fcacedddbc7818fe3cadb8fc2ca8fdccaca958fdbc7cedb8fd8c0dac3cb8fcdca8fc9c0dadd8fdbc7c0dadccec1cb8fc2c6c3cadc8fcbc0d8c1838fe68fdbc7c6c1c44d2f3b4d2f368f87c9c0dd838fd6c0da8fdccaca838feec3c6ccca8fc7cecb8fc3caceddc1db8fdccad9caddcec38fdbc7c6c1c8dc8fc0c98fdbc7c6dc8fdcc0dddb8fc6c18fc7cadd8fc3cadcdcc0c1dc8fc6c18fdbc7ca8fdcccc7c0c0c3ddc0c0c2838fcec1cb8fdbc7c0dac8c78fdbc7c6dc8fd8cedc8fc1c0db8fce8fd9caddd68fc8c0c0cb8fc0dfdfc0dddbdac1c6dbd68fc9c0dd8fdcc7c0d8c6c1c88fc0c9c98fc7cadd8fc4c1c0d8c3cacbc8ca838fcedc8fdbc7caddca8fd8cedc8fc1c08fc0c1ca8fdbc08fc3c6dcdbcac18fdbc08fc7cadd838fdcdbc6c3c38fc6db8fd8cedc8fc8c0c0cb8fdfddceccdbc6ccca8fdbc08fdcced68fc6db8fc0d9cadd868f4d2f374d2f3bd6cadc838fdbc7cedb4d2f36dc8fcecdc0dadb8fdbc7ca8fddc6c8c7db8fcbc6dcdbcec1ccca4d2f3bcddadb8fdbc7cac18fe68fd8c0c1cbcadd8fd8c7cedb8fe3cedbc6dbdacbca8fc0dd8fe3c0c1c8c6dbdacbca8fe64d2f36d9ca8fc8c0db8fdbc0904d2f368f87eec3c6ccca8fc7cecb8fc1c08fc6cbcace8fd8c7cedb8fe3cedbc6dbdacbca8fd8cedc838fc0dd8fe3c0c1c8c6dbdacbca8fcac6dbc7cadd838fcddadb8fdbc7c0dac8c7db8fdbc7cad68fd8caddca8fc1c6ccca8fc8ddcec1cb8fd8c0ddcbdc8fdbc08fdcced68186'
ciphertext_9 = '3c1e091f09021800154c1f04094c0e090b0d024c0d0b0d0502424c8eecf4254c1b030208091e4c050a4c254c1f040d00004c0a0d00004c1e050b04184c18041e03190b044c1804094c090d1e18044d4c24031b4c0a190202154c05188eecf500004c1f0909014c18034c0f0301094c0319184c0d0103020b4c1804094c1c09031c00094c18040d184c1b0d00074c1b0518044c180409051e4c04090d081f4c08031b021b0d1e084d4c3804094c2d0218051c0d180405091f404c254c18040502078eecf88eecf54c441f04094c1b0d1f4c1e0d1804091e4c0b000d084c1804091e094c1b0d1f4c02034c0302094c00051f18090205020b404c1804051f4c18050109404c0d1f4c05184c080508028eecf5184c1f031902084c0d184c0d00004c1804094c1e050b04184c1b031e08454c8eecf48eecf80e19184c254c1f040d00004c040d1a094c18034c0d1f074c180409014c1b040d184c1804094c020d01094c030a4c1804094c0f031902181e154c051f404c1503194c0702031b424c3c00090d1f09404c210d8eecf50d01404c051f4c1804051f4c22091b4c36090d000d02084c031e4c2d191f181e0d00050d538eecf54c440d02084c1f04094c181e0509084c18034c0f191e181f09154c0d1f4c1f04094c1f1c0307098eecf80a0d020f154c0f191e181f091505020b4c0d1f4c1503198eecf51e094c0a0d000005020b4c18041e03190b044c1804094c0d051e4d4c28034c1503194c18040502074c1503194c0f031900084c010d020d0b094c051853454c8eecf42d02084c1b040d184c0d024c050b02031e0d02184c0005181800094c0b051e004c1f04098eecf500004c18040502074c01094c0a031e4c0d1f0705020b4d4c2203404c05188eecf500004c02091a091e4c08034c18034c0d1f07564c1c091e040d1c1f4c254c1f040d00004c1f09094c05184c1b1e05181809024c191c4c1f0301091b04091e09428eecf5'
ciphertext_10 = '6a415940020e4a415940020e4a415940000e7a464b5c4b0e594f5d0e40415a464740490e4b425d4b0e5a410e4a41020e5d410e6f42474d4b0e5d4141400e4c4b494f400e5a4f42454740490e4f494f4740000eccaeb66a47404f46ccaeb742420e43475d5d0e434b0e584b5c570e435b4d460e5a4103404749465a020e670e5d46415b424a0e5a464740450fccaeb70e066a47404f460e594f5d0e5a464b0e4d4f5a00070eccaeb6670e46415e4b0e5a464b57ccaeb742420e5c4b434b434c4b5c0e464b5c0e5d4f5b4d4b5c0e41480e434742450e4f5a0e5a4b4f035a47434b000e6a47404f460e43570e4a4b4f5c0f0e670e59475d460e57415b0e594b5c4b0e4a4159400e464b5c4b0e59475a460e434b0f0e7a464b5c4b0e4f5c4b0e40410e43474d4b0e47400e5a464b0e4f475c020e67ccaeb7430e4f485c4f474a020e4c5b5a0e57415b0e434749465a0e4d4f5a4d460e4f0e4c4f5a020e4f404a0e5a464f5accaeb75d0e584b5c570e4247454b0e4f0e43415b5d4b020e57415b0e45404159000e6c5b5a0e4a410e4d4f5a5d0e4b4f5a0e4c4f5a5d020e670e5941404a4b5c11ccaeb70e6f404a0e464b5c4b0e6f42474d4b0e4c4b494f400e5a410e494b5a0e5c4f5a464b5c0e5d424b4b5e57020e4f404a0e594b405a0e41400e5d4f574740490e5a410e464b5c5d4b4248020e47400e4f0e4a5c4b4f43570e5d415c5a0e41480e594f57020eccaeb66a410e4d4f5a5d0e4b4f5a0e4c4f5a5d110e6a410e4d4f5a5d0e4b4f5a0e4c4f5a5d11ccaeb70e4f404a0e5d41434b5a47434b5d020eccaeb66a410e4c4f5a5d0e4b4f5a0e4d4f5a5d11ccaeb70e48415c020e57415b0e5d4b4b020e4f5d0e5d464b0e4d415b424a40ccaeb75a0e4f405d594b5c0e4b475a464b5c0e5f5b4b5d5a474140020e475a0e4a474a40ccaeb75a0e435b4d460e434f5a5a4b5c0e5946474d460e594f570e5d464b0e5e5b5a0e475a000e7d464b0e484b425a0e5a464f5a0e5d464b0e594f5d0e4a41544740490e414848020e4f404a0e464f4a0e445b5d5a0e4c4b495b400e5a410e4a5c4b4f430e5a464f5a0e5d464b0e594f5d0e594f42454740490e464f404a0e47400e464f404a0e59475a460e6a47404f46020e4f404a0e5d4f574740490e5a410e464b5c0e584b5c570e4b4f5c404b5d5a4257020eccaeb6604159020e6a47404f46020e5a4b42420e434b0e5a464b0e5a5c5b5a46140e4a474a0e57415b0e4b584b5c0e4b4f5a0e4f0e4c4f5a11ccaeb70e59464b400e5d5b4a4a4b404257020e5a465b435e0f0e5a465b435e0f0e4a4159400e5d464b0e4d4f434b0e5b5e41400e4f0e464b4f5e0e41480e5d5a474d455d0e4f404a0e4a5c570e424b4f584b5d020e4f404a0e5a464b0e484f42420e594f5d0e41584b5c00'

ciphertexts = [
    ciphertext_1,
    ciphertext_2,
    ciphertext_3,
    ciphertext_4,
    ciphertext_5,
    ciphertext_6,
    ciphertext_7,
    ciphertext_8,
    ciphertext_9,
    ciphertext_10
]

def main():
    messages_keys = []
    for ciphertext in ciphertexts:
        messages_keys.append(crack_ciphertext(ciphertext))
    print(messages_keys[0])

main()

# What would I do if the key was 5 bytes ?

# For the encryption I would proceed in a "cycle" way
# I mean, the first byte of our message will be encrypted with the first byte of our key
# the second byte of our message with the second byte of our key and so on
# Once we reached the max length of our key (here 5) we return to the first byte of our key and so on

# A better way to explain it is to repeat our key until it matches our message length
# For instance: message = "Just an example !" | key = "key"
# Just an example !
# keykeykeykeykeyke

# For the decryption, I would also proceed in the same way as I decrypted the single byte XOR
# Since there are 256 ** len(key) possibilities, I guess that this is not a good method